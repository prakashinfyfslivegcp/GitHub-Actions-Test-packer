name: 'Terraform CI'

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: self-hosted

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: /home/newcloudfriends/actions-runner/fslive

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        path: /home/newcloudfriends/actions-runner/fslive
    
    - name: Terraform Format
      run: terraform fmt /home/newcloudfriends/actions-runner/fslive
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init /home/newcloudfriends/actions-runner/fslive

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan /home/newcloudfriends/actions-runner/fslive/GitHub-Actions-Test/GitHub-Actions-Test/examples
      env:
        TERRAFORM_CLI_PATH: /home/newcloudfriends/actions-runner/fslive/GitHub-Actions-Test/GitHub-Actions-Test/examples
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'merge'
      run: terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

         
